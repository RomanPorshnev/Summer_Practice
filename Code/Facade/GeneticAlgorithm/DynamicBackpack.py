'''
Данная функция решение задачу о рюкзаке динамическим методом (нужно для сравнения с генетическим алгоритмом)
Входные данные: список весов предметов, список стоимостей предметов, вместимость рюкзака
Выходные данные: максимальная стоимость предметов, набор предметов
'''
def knapsack(weights, values, capacity):
    n = len(weights)
    # Создаем матрицу размером (n+1) x (capacity+1) и заполняем ее нулями
    dp = [[0] * (capacity + 1) for _ in range(n + 1)]

    for i in range(1, n + 1):
        for j in range(1, capacity + 1):
            # Если текущий предмет помещается в рюкзак
            if weights[i - 1] <= j:
                # Выбираем максимальную стоимость между включением или исключением предмета
                dp[i][j] = max(values[i - 1] + dp[i - 1]
                [j - weights[i - 1]], dp[i - 1][j])
            else:
                # Текущий предмет не помещается в рюкзак, поэтому стоимость остается такой же, как и для предыдущих предметов
                dp[i][j] = dp[i - 1][j]

    # Восстановление решения
    selected_items = []
    i = n
    j = capacity
    while i > 0 and j > 0:
        if dp[i][j] != dp[i - 1][j]:
            # Предмет был выбран
            selected_items.append(i - 1)
            j -= weights[i - 1]
        i -= 1

    return dp[n][capacity]